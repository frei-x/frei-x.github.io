{"meta":{"title":"衣沾不足惜","subtitle":null,"description":null,"author":"衣沾不足惜","url":"https://github.com/javascripth","root":"/"},"pages":[{"title":"categories","date":"2019-04-25T10:28:52.000Z","updated":"2019-04-26T01:10:48.180Z","comments":false,"path":"categories/index.html","permalink":"https://github.com/javascripth/categories/index.html","excerpt":"","text":""},{"title":"tags","date":"2019-04-25T10:26:44.000Z","updated":"2019-04-25T10:26:44.775Z","comments":true,"path":"tags/index-1.html","permalink":"https://github.com/javascripth/tags/index-1.html","excerpt":"","text":""},{"title":"tags","date":"2019-04-25T10:26:13.000Z","updated":"2019-04-25T10:30:01.872Z","comments":false,"path":"tags/index.html","permalink":"https://github.com/javascripth/tags/index.html","excerpt":"","text":""}],"posts":[{"title":"Array的属性和方法 - js标准库之旅(一)","slug":"Array的属性和方法 -js标准库之旅(一)","date":"2019-04-27T12:49:42.000Z","updated":"2019-04-28T09:44:15.047Z","comments":true,"path":"2019/04/27/Array的属性和方法 -js标准库之旅(一)/","link":"","permalink":"https://github.com/javascripth/2019/04/27/Array的属性和方法 -js标准库之旅(一)/","excerpt":"前言&emsp;&emsp;一门编程语言 ~= 语法 + 标准库 + 开发范式。&emsp;&emsp;一个程序 ~= 数据结构 + 算法。 &emsp;&emsp;标准库，在js中即为标准的内置对象，这些对象或对象的原型上内置了很多方法和属性，这些写好了的东西，我们也常常称之为“api”。 &emsp;&emsp;如果掌握标准库中的api，并能灵活运用，就像 “熟读唐诗三百首，不会做诗也会吟” 。可以不再自己手动实现、依赖第三方插件，能为开发节省大量的时间。","text":"前言&emsp;&emsp;一门编程语言 ~= 语法 + 标准库 + 开发范式。&emsp;&emsp;一个程序 ~= 数据结构 + 算法。 &emsp;&emsp;标准库，在js中即为标准的内置对象，这些对象或对象的原型上内置了很多方法和属性，这些写好了的东西，我们也常常称之为“api”。 &emsp;&emsp;如果掌握标准库中的api，并能灵活运用，就像 “熟读唐诗三百首，不会做诗也会吟” 。可以不再自己手动实现、依赖第三方插件，能为开发节省大量的时间。 转换为数组： Array.fromArray.from将伪数组或可迭代对象转换为一个新的数组 第一个参数是待转换的伪数组或可迭代对象,第二个参数是一个函数，相当于内置的map函数,第三参数是map函数中this指向。 伪数组：Nodelist 、arguments 可迭代对象：可以理解为任何可以被循环的对象，例如数组、Set，Map，字符串也可以被迭代。 123456let arrNodeList = Array.from(document.querySelectorAll('div'));console.log(arrNodeList);// dom对象组成的数组let arrStr = Array.from('我是字符串啊');console.log(arrStr);//[\"我\", \"是\", \"字\", \"符\", \"串\", \"啊\"] eg：在函数中,将所有传入的参数进行平方计算,且过滤掉非Number类型数据,返回计算后的值组成的数组。第二个参数用于迭代的map函数需要 return。12345678910111213141516function fun()&#123; let arrAllArg = Array.from(arguments,function(item,index)&#123; if(!isNaN(item))&#123; return item**2; &#125;else&#123; return null; &#125; &#125;); console.log(arrAllArg); // arguments不能使用数组方法。转换后arrArg是数组了 let arrArg = arrAllArg.filter(item =&gt; Boolean(item)==true) console.log(arrArg);&#125;fun(1,2,3,6,'a')//[1, 4, 9, 36,\"a\"]//[1, 4, 9, 36] 过滤数组：filter过滤掉数组中不满足条件的元素，返回剩下的元素组成的新数组。不会改变原数组。 参数是回调函数,返回false则过滤掉该元素 第二个参数为回调函数中this的指向 回调函数三个参数分别表示 当前迭代的元素、索引值、调用filter的原数组。 eg：返回位于Asia，且area大于一百万平方千米的国家的数据12345678910111213141516171819202122let arrData = [&#123; \"continent\": \"Asia\", \"area\": 9634057, \"cname\": \"中国\", \"phoneCode\": \"86\", &#125;,&#123; \"continent\": \"Asia\", \"area\": 647500, \"cname\": \"阿富汗\", \"phoneCode\": \"93\",&#125;,&#123; \"continent\": \"North America\", \"area\": \"9379091\", \"cname\": \"美国\", \"phoneCode\": \"1\", &#125;];let arrCountryData = arrData.filter(function(item,index)&#123; return item['continent']=='Asia' &amp;&amp; item['area']&gt;1000000;&#125;);console.log(arrCountryData);//[&#123;\"continent\": \"Asia\",\"area\": 9634057, \"cname\": \"中国\", \"phoneCode\": \"86\"&#125;]&#125; 数组中是否存在某元素 includes扁平化嵌套的数组 flat 一个普通标题 一个普通标题 一个普通标题 短文本 中等文本 稍微长一点的文本 稍微长一点的文本 短文本 中等文本","categories":[{"name":"JavaScript","slug":"JavaScript","permalink":"https://github.com/javascripth/categories/JavaScript/"}],"tags":[{"name":"技巧","slug":"技巧","permalink":"https://github.com/javascripth/tags/技巧/"},{"name":"手册","slug":"手册","permalink":"https://github.com/javascripth/tags/手册/"},{"name":"数组","slug":"数组","permalink":"https://github.com/javascripth/tags/数组/"},{"name":"标准库","slug":"标准库","permalink":"https://github.com/javascripth/tags/标准库/"},{"name":"JS","slug":"JS","permalink":"https://github.com/javascripth/tags/JS/"}]},{"title":"two","slug":"two","date":"2019-04-25T10:14:58.000Z","updated":"2019-04-26T01:13:26.268Z","comments":true,"path":"2019/04/25/two/","link":"","permalink":"https://github.com/javascripth/2019/04/25/two/","excerpt":"","text":"","categories":[{"name":"golang","slug":"golang","permalink":"https://github.com/javascripth/categories/golang/"}],"tags":[{"name":"测试","slug":"测试","permalink":"https://github.com/javascripth/tags/测试/"},{"name":"22","slug":"22","permalink":"https://github.com/javascripth/tags/22/"}]},{"title":"first","slug":"first","date":"2019-04-25T01:22:20.000Z","updated":"2019-04-26T01:25:05.933Z","comments":true,"path":"2019/04/25/first/","link":"","permalink":"https://github.com/javascripth/2019/04/25/first/","excerpt":"","text":"你好 第一篇文章 引用 一个五个五个123&lt;div&gt;我是div&lt;/div&gt; &lt;script&gt;我是js&lt;/script&gt;&lt;!-- more --&gt; 单行代码","categories":[{"name":"web前端","slug":"web前端","permalink":"https://github.com/javascripth/categories/web前端/"}],"tags":[{"name":"js","slug":"js","permalink":"https://github.com/javascripth/tags/js/"},{"name":"原理","slug":"原理","permalink":"https://github.com/javascripth/tags/原理/"},{"name":"前端教程","slug":"前端教程","permalink":"https://github.com/javascripth/tags/前端教程/"}]},{"title":"����","slug":"初衷","date":"2019-04-23T05:27:55.933Z","updated":"2019-04-28T05:17:18.678Z","comments":true,"path":"2019/04/23/初衷/","link":"","permalink":"https://github.com/javascripth/2019/04/23/初衷/","excerpt":"","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new \"My New Post\" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment","categories":[],"tags":[]}]}